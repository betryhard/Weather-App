from datetime import datetime
from flask_sqlalchemy import SQLAlchemy
from app import db

class SystemPrompt(db.Model):
    
    __tablename__ = 'system_prompts'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False, unique=True)
    description = db.Column(db.Text, nullable=True)
    prompt_content = db.Column(db.Text, nullable=False)
    is_active = db.Column(db.Boolean, default=False, nullable=False)
    created_by = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    
    creator = db.relationship('User', backref='system_prompts', lazy=True)
    
    def __init__(self, name, prompt_content, created_by, description=None):
        self.name = name
        self.prompt_content = prompt_content
        self.created_by = created_by
        self.description = description
    
    def activate(self):
        SystemPrompt.query.update({'is_active': False})
        self.is_active = True
        db.session.commit()
    
    def to_dict(self):
        return {
            'id': self.id,
            'name': self.name,
            'description': self.description,
            'prompt_content': self.prompt_content,
            'is_active': self.is_active,
            'created_by': self.created_by,
            'creator_username': self.creator.username if self.creator else None,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }
    
    @classmethod
    def get_active_prompt(cls):
        return cls.query.filter_by(is_active=True).first()
    
    @classmethod
    def get_default_prompt(cls):
        return """B·∫°n l√† tr·ª£ l√Ω th·ªùi ti·∫øt th√¥ng minh v√† th√¢n thi·ªán cho Vi·ªát Nam. B·∫°n c√≥ 4 tools:

1. search_vietnam_cities_tool(query) - t√¨m th√†nh ph·ªë VN
2. get_current_weather(location) - th·ªùi ti·∫øt hi·ªán t·∫°i 
3. get_weather_forecast(location, days) - d·ª± b√°o th·ªùi ti·∫øt theo ng√†y
4. get_hourly_weather_forecast(location, hours) - d·ª± b√°o th·ªùi ti·∫øt theo gi·ªù (12h/24h/48h)

üåü KH·∫¢ NƒÇNG C·ª¶A B·∫†N:

**TH√îNG TIN TH·ªúI TI·∫æT:**
- Th·ªùi ti·∫øt hi·ªán t·∫°i v√† d·ª± b√°o c√°c th√†nh ph·ªë Vi·ªát Nam
- D·ª± b√°o theo gi·ªù (12 gi·ªù, 24 gi·ªù, 48 gi·ªù t·ªõi)
- Ph√¢n t√≠ch xu h∆∞·ªõng th·ªùi ti·∫øt, so s√°nh gi·ªØa c√°c th√†nh ph·ªë

**T∆Ø V·∫§N TH·ªúI TI·∫æT: (n·∫øu ng∆∞·ªùi d√πng c√≥ h·ªèi, c√≤n kh√¥ng th√¨ kh√¥ng t∆∞ v·∫•n)**
- üëï Trang ph·ª•c ph√π h·ª£p (√°o kho√°c, √¥, gi√†y d√©p, ph·ª• ki·ªán...)
- üèÉ Ho·∫°t ƒë·ªông ph√π h·ª£p (th·ªÉ thao, du l·ªãch, picnic, shopping...)
- üéµ Nh·∫°c ph√π h·ª£p v·ªõi th·ªùi ti·∫øt (ballad cho ng√†y m∆∞a, nh·∫°c vui cho n·∫Øng...)
- üç≤ M√≥n ƒÉn ph√π h·ª£p (n√≥ng khi l·∫°nh, m√°t khi n√≥ng...)
- üí° L·ªùi khuy√™n s·ª©c kh·ªèe v√† an to√†n
- üìÖ L√™n k·∫ø ho·∫°ch ho·∫°t ƒë·ªông theo th·ªùi ti·∫øt

**QUY TR√åNH X·ª¨ L√ù:**
- C√¢u h·ªèi v·ªÅ th·ªùi ti·∫øt c·ª• th·ªÉ ‚Üí D√πng tools ƒë·ªÉ l·∫•y data ‚Üí Ph√¢n t√≠ch v√† t∆∞ v·∫•n
- C√¢u h·ªèi t∆∞ v·∫•n chung ‚Üí Tr·∫£ l·ªùi tr·ª±c ti·∫øp v·ªõi ki·∫øn th·ª©c v·ªÅ th·ªùi ti·∫øt Vi·ªát Nam
- C√¢u h·ªèi v·ªÅ d·ª± b√°o theo gi·ªù ‚Üí D√πng get_hourly_weather_forecast
- Lu√¥n th√¢n thi·ªán, s√°ng t·∫°o v√† practical

**H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG TOOLS:**
- get_hourly_weather_forecast: D√πng khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ "theo gi·ªù", "hourly", "12 gi·ªù", "24 gi·ªù", "48 gi·ªù"
- get_weather_forecast: D√πng cho d·ª± b√°o theo ng√†y
- get_current_weather: D√πng cho th·ªùi ti·∫øt hi·ªán t·∫°i

**V√ç D·ª§ LO·∫†I C√ÇU H·ªéI:**
"H√† N·ªôi h√¥m nay m·∫∑c g√¨?" ‚Üí L·∫•y th·ªùi ti·∫øt HN ‚Üí T∆∞ v·∫•n outfit
"Th·ªùi ti·∫øt H√† N·ªôi theo gi·ªù" ‚Üí D√πng get_hourly_weather_forecast
"24 gi·ªù t·ªõi c√≥ m∆∞a kh√¥ng?" ‚Üí D√πng hourly forecast 
"Th·ªùi ti·∫øt n√†y nghe nh·∫°c g√¨?" ‚Üí G·ª£i √Ω playlist theo mood th·ªùi ti·∫øt  
"N√™n ƒëi ƒë√¢u ch∆°i khi tr·ªùi m∆∞a?" ‚Üí G·ª£i √Ω ho·∫°t ƒë·ªông indoor
"ƒÇn g√¨ cho ph√π h·ª£p th·ªùi ti·∫øt?" ‚Üí Suggest m√≥n ƒÉn theo nhi·ªát ƒë·ªô

Lu√¥n d√πng **bold**, emoji v√† markdown ƒë·ªÉ response sinh ƒë·ªông!"""
    
    @classmethod
    def create_default_prompt(cls, admin_user_id):
        if not cls.query.first():  # No prompts exist
            default_prompt = cls(
                name="Default Weather Assistant",
                description="Default system prompt for weather chatbot with lifestyle recommendations",
                prompt_content=cls.get_default_prompt(),
                created_by=admin_user_id
            )
            default_prompt.is_active = True
            db.session.add(default_prompt)
            db.session.commit()
            return default_prompt
        return None
    
    def __repr__(self):
        return f'<SystemPrompt {self.name}>' 